#!/usr/bin/env python3
import random 
import collections
import itertools




suits = ("♥", "♠", "♦", "♣")
numbers = ("2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", "King", "Ace")

class card:
    def __init__(self, numeral, suit):
        self.numeral = numeral
        self.suit = suit
        self.card = self.numeral + self.suit
    def __repr__(self):
        return self.numeral + "-" + self.suit

class poker_hand:
    def __init__(self, card_list):
        self.card_list = card_list
    def __repr__(self):
        dealt = "Nothing."
        numeral_dict = collections.defaultdict(int)
        suit_dict = collections.defaultdict(int)
        for my_card in self.card_list:
            numeral_dict[my_card.numeral] += 1
            suit_dict[my_card.suit] += 1
        # Pair
        if len(numeral_dict) == 4:
            dealt = "One pair."
        # Two pair or 3-of-a-kind
        elif len(numeral_dict) == 3:
            if 3 in numeral_dict.values():
                dealt ="Three of a kind."
            else:
                dealt ="Two pair."
        # Full house or 4-of-a-kind
        elif len(numeral_dict) == 2:
            if 2 in numeral_dict.values():
                dealt ="Full house."
            else:
                dealt ="Four of a kind."
        else:
            # Flushes and straights
            straight, flush = False, False
            if len(suit_dict) == 1:
                flush = True
            min_numeral = min([numbers.index(x) for x in numeral_dict.keys()])
            max_numeral = max([numbers.index(x) for x in numeral_dict.keys()])
            if int(max_numeral) - int(min_numeral) == 4:
                straight = True
            if not set(numeral_dict.keys()):
                straight = True
            if straight and not flush:
                dealt ="Straight."
            elif flush and not straight:
                dealt ="Flush."
            elif flush and straight:
                dealt ="Straight flush."
        product = " ".join([str(x) for x in self.card_list])
        return "{product} ({dealt})".format(**locals())

    def is_straight(self):
        pass
        return false

    def is_flush(self):
        pass
        return false

    def is_straight_flush(self):
        return (self.is_straight() and self.is_flush())

class deck(set):
    def __init__(self):
        for numeral, suit in itertools.product(numbers, suits):
            self.add(card(numeral, suit))
    def get_card(self):
        a_card = random.sample(self, 1)[0]
        self.remove(a_card)
        return a_card
    def get_hand(self, numeral_of_cards=5):
        if numeral_of_cards == 5:
            return poker_hand([self.get_card() for x in range(numeral_of_cards)])
        else:
            raise NotImplementedError

for i in range(1):
    print(deck().get_hand())
